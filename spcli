#!/bin/bash
function init () {
  spcli_version="0.02"

  priv_mode="admin"
  system_console_log=/opt/spcli/log/system_console
  touch $system_console_log

  # enable history
  set -o history
  HISTFILE=/dev/null # will maintain our own history file
  spcli_history=/opt/spcli/log/history # will keep our own history here
  touch $spcli_history

  # find the virsh domain of the storage controller
  systemdisk="$(find /dev | grep _DataONTAPv.raw | grep -v mapper | grep -v by-id)"
  diskfilename=$(basename "$systemdisk")
  domain=${diskfilename::${#diskfilename}-15}

  # start logging the system console
  if is_power_on; then log_system_console;fi
}

function confirm_dirty_shutdown () {
  while true; do
    read -r -p "This will cause a dirty shutdown of your appliance. Continue? [y/n] " choice
    case "$choice" in
      y|Y ) return 0 ;;
      n|N ) return 1 ;;
        * ) echo "Invalid response: [ $choice ]." ;;
    esac
  done
}

function confirm_sp_reboot () {
  while true; do
    read -r -p "The Service Processor will be rebooted.  Continue? [y/n] " choice
        case "$choice" in
      y|Y ) return 0 ;;
      n|N ) return 1 ;;
        * ) echo "Invalid response: [ $choice ]." ;;
    esac
  done
}

function is_power_on () {
  if [ "$(virsh --connect qemu:///system domstate $domain)" == "running" ]; then return 0; fi
  return 1
}

function events_info () {
    echo "Number of records: $(journalctl | wc -l)"
    echo "Oldest record's timestamp: $(journalctl | head -n 1 | cut -d' ' -f1-3)"
    echo "Latest record's timestamp: $(journalctl | tail -n 1 | cut -d' ' -f1-3)"
    echo
}

function events_newest () {
    count=$(echo "$cmd" | cut -d' ' -f 3)

    case $count in
        "" ) usage ;;
        0 | *[!0-9]*) echo "Argument is not an integer > 0 and should be"; usage ;;
        *) journalctl -n $count --no-pager
    esac
}

function events_oldest () {
    count=$(echo "$cmd" | cut -d' ' -f 3)

    case $count in
        "" ) usage ;;
        0 | *[!0-9]*) echo "Argument is not an integer > 0 and should be"; usage ;;
        *) journalctl | head -n $count 
    esac
}

function events_search () {
    searchstr=$(echo "$cmd" | cut -d' ' -f 3-)

    case $searchstr in
        "" ) usage ;;
        *) journalctl -g "$searchstr"
    esac
}

function log_system_console () {

  #trim noise from log
  sed -i '/spawn virsh/d' $system_console_log 
  sed -i '/Connected to domain/d' $system_console_log 
  sed -i '/Escape character is/d' $system_console_log 
  sed -i '/stream had I\/O failure/d' $system_console_log 

  # use expect so we can background this process
  expect -c "set timeout -1; spawn virsh --connect qemu:///system console $domain --force; expect eof" >> $system_console_log &

}

# This just reloads the spcli script
# Does not reboot the host
function sp_reboot () {
  if confirm_sp_reboot; then 
    echo
    ./$(basename $0) && exit
  else 
    echo
  fi
}

function sp_status () {
   echo "Firmware Version:     $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
   echo "IPv4 configuration:"
   echo "  IP Address:         $(ifconfig | grep "inet " | grep -v "127.0.0.1" | tr -s ' ' | cut -d' ' -f3)"
   echo "  Netmask:            $(ifconfig | grep "inet " | grep -v "127.0.0.1" | tr -s ' ' | cut -d' ' -f5)"
   echo "  Gateway:            $(ip route | grep default | cut -d' ' -f 3)"
   
}

function system_core () {
  if confirm_dirty_shutdown; then 
    virsh --connect qemu:///system inject-nmi "$domain"
  fi
  echo
}

function system_log () {
  case $cmd in 
    "" ) 
      cat $system_console_log | \
        sed '/spawn virsh/d' | \
        sed '/Connected to domain/d' | \
        sed '/Escape character is/d' | \
        sed '/stream had I\/O failure/d'
      ;;
    *"-a"* )
      echo "==================== Log #1 start"
      awk '/Loading kernel.../{f=1;s=""}f{s=s$0"\n"}END{printf "%s",s}' $system_console_log | awk '/---<<BOOT>>---/{exit} {print}' |
        sed '/spawn virsh/d' | \
        sed '/Connected to domain/d' | \
        sed '/Escape character is/d' | \
        sed '/stream had I\/O failure/d' 
      echo "==================== Log #1 end"
      echo
      echo "==================== Log #2 start"
      awk '/---<<BOOT>>---/{f=1;s=""}f{s=s$0"\n"}END{printf "%s",s}' $system_console_log |
        sed '/spawn virsh/d' | \
        sed '/Connected to domain/d' | \
        sed '/Escape character is/d' | \
        sed '/stream had I\/O failure/d' 
      echo "==================== Log #2 end"
      ;;
    *"-l 1"* ) 
      awk '/Loading kernel.../{f=1;s=""}f{s=s$0"\n"}END{printf "%s",s}' $system_console_log | awk '/---<<BOOT>>---/{exit} {print}' |
        sed '/spawn virsh/d' | \
        sed '/Connected to domain/d' | \
        sed '/Escape character is/d' | \
        sed '/stream had I\/O failure/d' 
      ;;
    *"-l 2"* )
      awk '/---<<BOOT>>---/{f=1;s=""}f{s=s$0"\n"}END{printf "%s",s}' $system_console_log |
        sed '/spawn virsh/d' | \
        sed '/Connected to domain/d' | \
        sed '/Escape character is/d' | \
        sed '/stream had I\/O failure/d' 
      ;; 
    * ) usage ;;
  esac
}

function system_power_cycle () {
  if confirm_dirty_shutdown; then 
    if is_power_on; then 
      virsh --connect qemu:///system destroy "$domain" --graceful > /dev/null
      virsh --connect qemu:///system start "$domain" > /dev/null
      log_system_console
      echo  
    fi
  fi
}

function system_power_halt () {
    virsh --connect qemu:///system shutdown "$domain"
}

function system_power_off () {
  if confirm_dirty_shutdown; then 
    if is_power_on; then
      virsh --connect qemu:///system destroy "$domain" --graceful > /dev/null
      echo
    fi
  fi
}

function system_power_on () {
  if ! is_power_on; then
    virsh --connect qemu:///system start $domain > /dev/null
    log_system_console
  fi
}

function system_power_status () {
  if is_power_on; then
    echo "System Power is on"
  else
    echo "System Power is off"
  fi
}

function system_reset_current () {
  if confirm_dirty_shutdown; then 
      virsh --connect qemu:///system destroy "$domain" --graceful > /dev/null
      virsh --connect qemu:///system start "$domain" > /dev/null
      log_system_console
      echo  
  fi
}

function usage () {
  case $cmd in 
    "date"*          ) echo "usage: date";;
    "events all"*    ) echo "usage: events all";;
    "events info"*   ) echo "usage: events info";;
    "events newest"* ) echo "usage: events newest <number>" ;;
    "events oldest"* ) echo "usage: events oldest <number>" ;;
    "events search"* ) echo "usage: events search <string>" ;;
    "help"*          ) echo "usage: help [<command>]" ;;
    "system log"*    ) echo "usage: system log [-a] [-l <log_number>]" ;;
  esac
}

function help (){
  case $cmd in
    *"date"* )
        echo "date - print date and time" ;;
    *"events all"* ) 
        echo "events all - print all system events" ;;
    *"events info"* ) 
        echo "events info - print system event log information" ;;
    *"events newest"* )
        echo "events newest - print newest system events" ;;
    *"events oldest"* )
        echo "events oldest - print oldest system events" ;;
    *"events search"* )
        echo "events search - search for and print system events" ;;
    *"events"* )
        echo "events all - print all system events"
        echo "events info - print system event log information"
        echo "events newest - print newest system events"
        echo "events oldest - print oldest system events"
        echo "events search - search for and print system events"
        echo ;;
    *"exit"* )
        echo "exit - exit from the SP command line interface" ;;
    "help help"   )
        echo "help - print command help" ;;
    *"help"* | "?"  )
        echo "date - print date and time"
        echo "exit - exit from the SP command line interface"
        echo "events - print system events and event information"
        echo "help - print command help"
        echo "priv - show and set user mode"
        echo "sp - commands to control the SP"
        echo "system - commands to control the system"
        echo "version - print Service Processor version"
        echo ;;
    *"priv set"* )
        echo "priv set admin - enter into admin user mode"
        echo "priv set -q admin - enter into admin user mode"
        echo "priv set advanced - enter into advanced user mode"
        echo "priv set -q advanced - enter into advanced user mode(quiet flag)"
        echo "priv set diag - enter into diag user mode"
        echo "priv set -q diag - enter into diag user mode(quiet flag)"
        echo ;;
    *"priv show"* )
        echo "priv show - show current user mode" ;;
    *"priv"* )
        echo "priv set - set user mode"
        echo "priv show - show current user mode"
        echo ;;
    *"sp reboot"* )
        echo "sp reboot - reboot the SP";;
    *"sp status"* )
        echo "sp status - print SP status information" ;;
    *"sp uptime" )
        echo "sp uptime - display the service processor uptime" ;;
    *"sp"* )
        echo "sp reboot - reboot the SP"
        echo "sp status - print SP status information"
        echo "sp uptime - display service processor uptime"
        echo ;;
    *"system console"* )
        echo "system console - connect to the system console" ;;
    *"system core"* )
        echo "system core - dump the system core and reset" ;;
    *"system log"* )
        echo "system log - print system console logs";;
    *"system power"* )
        echo "system power cycle - power the system off, then on"
        echo "system power halt - halt the system"
        echo "system power off - power the system off"
        echo "system power on - power the system on"
        echo "system power status - print system power status"
        echo ;;
    *"system reset"* )
        echo "system reset current - reset the system using the current firmware"
        echo ;;
    *"system"* )
        echo "system console - connect to the system console"
        echo "system core - dump the system core and reset"
        echo "system log - print system console log"
        echo "system power - commands controlling system power"
        echo "system reset - reset the system using the selected firmware"
        echo "system sensors - print system sensors"
        echo ;;
    *"version"* )
        echo "version - print Service Processor version" ;;
    * ) usage ;;
  esac
}

function run_command () {
  # process command
  case $cmd in
    ""     ) ;;
    "date" ) date ;;
    "date "* ) usage ;;
    "events all" ) journalctl ;;
    "events all "* ) usage ;;
    "events info" ) events_info ;;
    "events info "* ) usage;;
    "events newest"* ) events_newest ;;
    "events oldest"* ) events_oldest ;;
    "events search"* ) events_search ;;
    "events" | "events "* ) help ;;
    "exit" | "exit "* ) exit ;;
    "help" | "help "* | "?"  ) help ;;
    "priv set" | "priv set admin" | "priv set admin "* )
        priv_mode="admin"
        echo "Administrative commands"
        echo ;;
    "priv set -q admin" | "priv set -q admin "* )
        priv_mode="admin"
        ;;
    "priv set advanced" | "priv set advanced "* )
        priv_mode="advanced"
        echo "Warning: These advanced commands are potentially dangerous; use them only when directed to do so by support personnel."
        echo ;;
    "priv set -q advanced" | "priv set -q advanced "* ) priv_mode="advanced" ;;
    "priv set diag" | "priv set diag "* )
        priv_mode="diag"
        echo "Warning: These diagnostic commands are for use by support personnel only."
        echo ;;
    "priv set -q diag" | "priv set -q diag "* ) priv_mode="diag" ;;
    "priv show" | "priv" | "priv show "* ) 
        echo "$priv_mode"
        echo ;;
    "priv set"* ) help ;;
    "sp reboot" ) sp_reboot ;;
    "sp status" ) sp_status ;;
    "sp uptime" ) uptime ;;
    "sp" | "sp "* ) help ;;
    "system console" )
        if is_power_on; then
          virsh --connect qemu:///system -e ^D console "$domain" --force | tee -a $system_console_log
          log_system_console
        fi
        ;;
    "system core" ) system_core ;;
    "system log -l 1-" )
        awk '/Loading kernel.../{f=1;s=""}f{s=s$0"\n"}END{printf "%s",s}' $system_console_log | awk '/---<<BOOT>>---/{exit} {print}' ;;
    "system log -l 2-" )
        awk '/---<<BOOT>>---/{f=1;s=""}f{s=s$0"\n"}END{printf "%s",s}' $system_console_log ;;
    "system log" | "system log "* ) system_log ;; # | more -d -n 10 
    "system power cycle" ) system_power_cycle ;;
    "system power halt" ) virsh --connect qemu:///system shutdown "$domain";;
    "system power off" ) system_power_off ;;
    "system power on" ) system_power_on ;;
    "system power status" ) system_power_status ;;
    "system reset" ) system_reset_current ;;
    "system reset current" ) system_reset_current ;;
    "system sensors" ) sensors ;;
    "system"* ) help ;;
    "version" ) echo "SP CLI for ONTAP Select version $spcli_version" ;;
    * ) echo "command not found. Type '?' for a list of available commands."
  esac
}

# main loop
function main () {
  init

  # if a command was passed as an argument, run it then exit.
  if [ "$*" != "" ]; then 
    cmd="$*"
    run_command
    exit
  fi

  # start an interactive shell
  while true; do

    # set prompt
    case $priv_mode in
      "admin" ) prompt="SP $domain>" ;;
      "advanced" ) prompt="SP $domain*>" ;;
      "diag" ) prompt="SP $domain*>" ;;
    esac

    # read command with custom history
    history -c
    history -r $spcli_history
    read -ep "$prompt " cmd
    if [ "$cmd" != "" ] && [ "$cmd" != "$(tail $spcli_history -n 1)" ];then echo "$cmd" >> $spcli_history;fi
    
    run_command

  done

}

main $*
