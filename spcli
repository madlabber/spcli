#!/bin/bash
function init () {
  spcli_version="0.03"

  priv_mode="admin"
  system_console_log=/opt/spcli/log/system_console
  touch $system_console_log

  # enable history
  set -o history
  HISTFILE=/dev/null # will maintain our own history file
  spcli_history=/opt/spcli/log/history # will keep our own history here
  touch $spcli_history

  # find the virsh domain of the storage controller
  systemdisk="$(find /dev | grep _DataONTAPv.raw | grep -v mapper | grep -v by-id)"
  diskfilename=$(basename "$systemdisk")
  domain=${diskfilename::${#diskfilename}-15}

  # start logging the system console
  if is_power_on; then log_system_console;fi

  # cache location for env file
  env=/opt/spcli/log/env

}

function confirm_dirty_shutdown () {
  while true; do
    read -r -p "This will cause a dirty shutdown of your appliance. Continue? [y/n] " choice
    case "$choice" in
      y|Y ) return 0 ;;
      n|N ) return 1 ;;
        * ) echo "Invalid response: [ $choice ]." ;;
    esac
  done
}

function confirm_sp_reboot () {
  while true; do
    read -r -p "The Service Processor will be rebooted.  Continue? [y/n] " choice
        case "$choice" in
      y|Y ) return 0 ;;
      n|N ) return 1 ;;
        * ) echo "Invalid response: [ $choice ]." ;;
    esac
  done
}

function extractenv () {
  offset="$(fdisk -l $systemdisk | grep FAT32 | tr -s ' ' | cut -d' ' -f2)s" 2>/dev/null
  if [ "$offset" != "" ];then  
    mcopy -n -i $systemdisk@@$offset ::env/env $env
  fi
}

function injectenv () {
  offset="$(fdisk -l $systemdisk | grep FAT32 | tr -s ' ' | cut -d' ' -f2)s"
  mcopy -o -i $systemdisk@@$offset $env ::env/env 
}

function printenv () {
  extractenv
  if [ "$1" == "" ];then
    cat $env | grep setenv | sort | sed 's^setenv ^^' | sed 's^ ^=^' | sed 's^"^^g' 
  else 
    cat $env | grep setenv | sort | sed 's^setenv ^^' | sed 's^ ^=^' | sed 's^"^^g' | grep "$1="
  fi 
}

function getenv () {
  extractenv
  if [ "$1" != "" ];then
    cat $env | grep setenv | sort | sed 's^setenv ^^' | sed 's^ ^=^' | sed 's^"^^g' | grep "$1=" | cut -d= -f2
  fi 
}

function setenv () {
  if is_power_on; then
    echo "error: system power is on"
  else
    key=$(echo "$1=$2" | cut -d= -f1)
    val=$(echo "$1=$2" | cut -d= -f2)
    
    if  [ "$(getenv $key)" == "" ];then 
      sed -i "1asetenv $key \"$val\"" $env
    else
      sed -i "s~^\(setenv $key \).*~\1\"$val\"~" $env
    fi
    
    # remove checksum
    sed -i -e '/^[0-9]/d' $env

    injectenv
    #echo $(printenv $key)
  fi
}

function unsetenv () {
  if is_power_on; then
    echo "error: system power is on"
  else
    #get key
    key=$(echo "$1=" | cut -d= -f1)

    # remove key
    if [ "$key" != "" ];then
      sed -i "s/^\(setenv $key \).*//" $env
    fi 

    # remove checksum
    sed -i -e '/^[0-9]/d' $env

    injectenv
  fi
}

function is_power_on () {
  if [ "$(virsh --connect qemu:///system domstate $domain)" == "running" ]; then return 0; fi
  return 1
}

function events_info () {
    echo "Number of records: $(journalctl | wc -l)"
    echo "Oldest record's timestamp: $(journalctl | head -n 1 | cut -d' ' -f1-3)"
    echo "Latest record's timestamp: $(journalctl | tail -n 1 | cut -d' ' -f1-3)"
    echo
}

function events_newest () {
    count=$(echo "$cmd" | cut -d' ' -f 3)

    case $count in
        "" ) usage ;;
        0 | *[!0-9]*) echo "Argument is not an integer > 0 and should be"; usage ;;
        *) journalctl -n $count --no-pager
    esac
}

function events_oldest () {
    count=$(echo "$cmd" | cut -d' ' -f 3)

    case $count in
        "" ) usage ;;
        0 | *[!0-9]*) echo "Argument is not an integer > 0 and should be"; usage ;;
        *) journalctl | head -n $count 
    esac
}

function events_search () {
    searchstr=$(echo "$cmd" | cut -d' ' -f 3-)

    case $searchstr in
        "" ) usage ;;
        *) journalctl -g "$searchstr"
    esac
}

function log_system_console () {

  #trim noise from log
  sed -i '/spawn virsh/d' $system_console_log 
  sed -i '/Connected to domain/d' $system_console_log 
  sed -i '/Escape character is/d' $system_console_log 
  sed -i '/stream had I\/O failure/d' $system_console_log 

  # use expect so we can background this process
  expect -c "set timeout -1; spawn virsh --connect qemu:///system console $domain --force; expect eof" >> $system_console_log &
  disown

}

# This just reloads the spcli script
# Does not reboot the host
function sp_reboot () {
  if confirm_sp_reboot; then 
    echo
    spcli && exit
  else 
    echo
  fi
}

function sp_status () {
   echo "Firmware Version:     $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
   echo "IPv4 configuration:"
   echo "  IP Address:         $(ifconfig | grep "inet " | grep -v "127.0.0.1" | tr -s ' ' | cut -d' ' -f3)"
   echo "  Netmask:            $(ifconfig | grep "inet " | grep -v "127.0.0.1" | tr -s ' ' | cut -d' ' -f5)"
   echo "  Gateway:            $(ip route | grep default | cut -d' ' -f 3)"
   
}

function system_console () {
  if is_power_on; then
    virsh --connect qemu:///system -e ^D console "$domain" --force | tee -a $system_console_log
    log_system_console
  fi
}

function system_core () {
  if confirm_dirty_shutdown; then 
    virsh --connect qemu:///system inject-nmi "$domain"
  fi
  echo
}

function system_fru_list () {
  echo
  echo "  FRU ID      Name"
  echo "=============================================="
  echo "    0         Controller"
  echo "    1         Chassis"
  echo 
}

function system_fru_show () {
  fru_id=$(echo "$cmd" | cut -d' ' -f 4)
  case $fru_id in 
    0 )       system_fru_show_0 ;;
    1 )       system_fru_show_1 ;;
    *[0-9]* ) echo "Invalid fru id" ;;
    * )       usage ;;
  esac 

}

function system_fru_show_0 () {
  echo
  echo "'Controller' inventory data:"
  echo
  echo "*** Product Info Area ***"
  echo "Mfg name            NetApp, Inc."
  echo "Product Name        Select"
  echo "System Model        $(getenv SYS_MODEL)"
  echo "System Rev          $(getenv SYS_REV)"
  echo "System Serial       $(getenv SYS_SERIAL_NUM)"
  echo "System Id           $(getenv bootarg.nvram.sysid)"
  echo
  echo "*** Select Info Area ***"
  echo "CPU Cores:          $(virsh --connect qemu:///system vcpucount $domain | grep current | grep config | tr -s ' ' | cut -d' ' -f3)" 
  echo "Memory:            $(virsh --connect qemu:///system dominfo $domain | grep 'Max memory' | tr -s ' ' | cut -d':' -f2)"
  echo "System Disks:"
  echo "$(virsh --connect qemu:///system dumpxml $domain | grep 'source dev' | grep -v 'dev/disk/' | cut -d\' -f 2 | sed -e 's/^/                    /')"
  echo "Data Disks:"
  echo "$(virsh --connect qemu:///system dumpxml $domain | grep 'source dev' | grep 'dev/disk/' | cut -d\' -f 2 | sed -e 's/^/                    /')"
  echo 

}

function system_fru_show_1 () {
  echo 
  echo
  echo "'Chassis' inventory data:"
  echo
  dmidecode -t 3 -q
  dmidecode -t 2 -q
  dmidecode -t 1 -q
  echo
}

function system_log () {
  page_size=$( echo $cmd | awk -F'-p ' '{print $2}' | awk -F' ' '{print $1}')

  case $page_size in
    "" )
      system_log_filtered | 
        sed '/spawn virsh/d' | \
        sed '/Connected to domain/d' | \
        sed '/Escape character is/d' | \
        sed '/stream had I\/O failure/d'
      ;;
    *[0-9]*) 
      system_log_filtered | 
        sed '/spawn virsh/d' | \
        sed '/Connected to domain/d' | \
        sed '/Escape character is/d' | \
        sed '/stream had I\/O failure/d' | \
        more -d -n $page_size
      ;;
    * ) usage ;;
  esac
}

function system_log_filtered () {
  case $cmd in 
    "system log" ) cat $system_console_log ;;
    *"-a"*   ) system_log_all ;;
    *"-l 1"* ) system_log_1 ;;
    *"-l 2"* ) system_log_2 ;; 
    * ) usage ;;
  esac
}

# print both log 1 and log 2
function system_log_all () {
  system_log_1
  echo
  system_log_2
}

# system log 1 should contain the loader stage of the most recent boot
function system_log_1 () {
      echo "==================== Log #1 start"
      awk '/Loading kernel.../{f=1;s=""}f{s=s$0"\n"}END{printf "%s",s}' $system_console_log | awk '/---<<BOOT>>---/{exit} {print}'
      echo "==================== Log #1 end"
}

# system log 2 should contain everything after the loader stage of the most recent boot
function system_log_2 () {
  echo "==================== Log #2 start"
  if [ "$(grep '\-\-\-<<BOOT>>---' $system_console_log)" == "" ];then 
    cat $system_console_log;
  else
    awk '/---<<BOOT>>---/{f=1;s=""}f{s=s$0"\n"}END{printf "%s",s}' $system_console_log
  fi 
  echo "==================== Log #2 end"
}

function system_power_cycle () {
  if confirm_dirty_shutdown; then 
    if is_power_on; then 
      virsh --connect qemu:///system destroy "$domain" --graceful > /dev/null
      virsh --connect qemu:///system start "$domain" > /dev/null
      log_system_console
      echo  
    fi
  fi
}

function system_power_halt () {
    virsh --connect qemu:///system shutdown "$domain"
}

function system_power_off () {
  if confirm_dirty_shutdown; then 
    if is_power_on; then
      virsh --connect qemu:///system destroy "$domain" --graceful > /dev/null
      echo
    fi
  fi
}

function system_power_on () {
  if ! is_power_on; then
    virsh --connect qemu:///system start $domain > /dev/null
    log_system_console
  fi
}

function system_power_status () {
  if is_power_on; then
    echo "System Power is on"
  else
    echo "System Power is off"
  fi
}

function system_reset () {
  if confirm_dirty_shutdown; then 
      virsh --connect qemu:///system destroy "$domain" --graceful > /dev/null
      virsh --connect qemu:///system start "$domain" > /dev/null
      log_system_console
      echo  
  fi
}

function system_reset_current () {
  booted_from="$(getenv BOOTED_FROM)"
  if [ "$booted_from" == "BACKUP" ];then 
    system_reset_backup
  else
    system_reset_primary 
  fi 
}

function system_reset_backup () {
  if confirm_dirty_shutdown; then
    virsh --connect qemu:///system destroy "$domain" --graceful > /dev/null
    virsh --connect qemu:///system start "$domain" > /dev/null
    echo
    sleep 1
    expect -c 'set timeout 1; \
               spawn virsh --connect qemu:///system console '$domain' --force; \
               expect "Booting in"; \
               send "boot_backup\r"; \
               send "boot_backup\r"; \
               sleep 2; \
               exit' >> $system_console_log
  fi
  log_system_console
}

function system_reset_primary () {
  if confirm_dirty_shutdown; then
    virsh --connect qemu:///system destroy "$domain" --graceful > /dev/null
    virsh --connect qemu:///system start "$domain" > /dev/null
    echo
    sleep 1
    expect -c 'set timeout 1; \
               spawn virsh --connect qemu:///system console '$domain' --force; \
               expect "Booting in"; \
               send "boot_primary\r"; \
               send "boot_primary\r"; \
               sleep 2; \
               exit' >> $system_console_log
  fi
  log_system_console
}

function usage () {
  case $cmd in 
    "date"*            ) echo "usage: date";;
    "events all"*      ) echo "usage: events all";;
    "events info"*     ) echo "usage: events info";;
    "events newest"*   ) echo "usage: events newest <number>" ;;
    "events oldest"*   ) echo "usage: events oldest <number>" ;;
    "events search"*   ) echo "usage: events search <string>" ;;
    "help"*            ) echo "usage: help [<command>]" ;;
    "system fru list"* ) echo "usage: system fru list" ;;
    "system fru show"* ) echo "usage: system fru show <FRU-ID>" ;;
    "system setenv"*   ) echo "usage: system setenv <key>=<value>" ;;
    "system unsetenv"* ) echo "usage: system unsetenv <key>" ;;
    "system log"*      ) echo "usage: system log [-a] [-p <page_size>] [-l <log_number>]" ;;
  esac
}

function help (){
  case $cmd in
    *"date"* )
        echo "date - print date and time" ;;
    *"events all"* ) 
        echo "events all - print all system events" ;;
    *"events info"* ) 
        echo "events info - print system event log information" ;;
    *"events newest"* )
        echo "events newest - print newest system events" ;;
    *"events oldest"* )
        echo "events oldest - print oldest system events" ;;
    *"events search"* )
        echo "events search - search for and print system events" ;;
    *"events"* )
        echo "events all - print all system events"
        echo "events info - print system event log information"
        echo "events newest - print newest system events"
        echo "events oldest - print oldest system events"
        echo "events search - search for and print system events"
        echo ;;
    *"exit"* )
        echo "exit - exit from the SP command line interface" ;;
    "help help"   )
        echo "help - print command help" ;;
    *"priv set"* )
        echo "priv set admin - enter into admin user mode"
        echo "priv set -q admin - enter into admin user mode"
        echo "priv set advanced - enter into advanced user mode"
        echo "priv set -q advanced - enter into advanced user mode(quiet flag)"
        echo "priv set diag - enter into diag user mode"
        echo "priv set -q diag - enter into diag user mode(quiet flag)"
        echo ;;
    *"priv show"* )
        echo "priv show - show current user mode" ;;
    *"priv"* )
        echo "priv set - set user mode"
        echo "priv show - show current user mode"
        echo ;;
    *"sp reboot"* )
        echo "sp reboot - reboot the SP";;
    *"sp status"* )
        echo "sp status - print SP status information" ;;
    *"sp uptime" )
        echo "sp uptime - display the service processor uptime" ;;
    *"sp"* )
        echo "sp reboot - reboot the SP"
        echo "sp status - print SP status information"
        echo "sp uptime - display service processor uptime"
        echo ;;
    *"system acp show"* )
        echo "system acp show - display ACP info status" ;;
    *"system acp sensors show"* )
        echo "system acp sensors show - display expander sensors status" ;;
    *"system acp"* )
        echo "system acp show - display ACP info status"
        echo "system acp sensors show - display expander sensors status" 
        echo ;;
    *"system battery"* )
        echo "system battery show - display battery info status"
        echo ;;
    *"system console"* )
        echo "system console - connect to the system console" ;;
    *"system core"* )
        echo "system core - dump the system core and reset" ;;
    *"system fru"* )
        echo "system fru show - display fru id inventory data"
        echo "system fru list - list fru id" 
        echo ;;
    *"system log"* )
        echo "system log - print system console logs";;
    *"system printenv"* )
        echo "system printenv - print system environment variables" ;;
    *"system setenv"* )
        echo "system setenv - print system environment variables" ;;
    *"system unsetenv"* )
        echo "system setenv - print system environment variables" ;;
    *"system power"* )
        echo "system power cycle - power the system off, then on"
        echo "system power halt - halt the system"
        echo "system power off - power the system off"
        echo "system power on - power the system on"
        echo "system power status - print system power status"
        echo ;;
    *"system reset"* )
        echo "system reset backup - reset the system using the backup firmware"
        echo "system reset current - reset the system using the current firmware"
        echo "system reset primary - reset the system using the primary firmware"
        echo ;;
    *"system forensics"* )
        echo "system forensics show - show the system forensics configuration settins"
        echo "system forensics log - display or clear system forensics logs"
        echo ;;
    *"system watchdog"* )
        echo "system watchdog status - Display the system watchdog status"
        echo ;;
    *"system"* )
        echo "system acp - acp related commands"
        echo "system battery - battery related commands"
        echo "system console - connect to the system console"
        echo "system core - dump the system core and reset"
        echo "system log - print system console log"
        echo "system power - commands controlling system power"
        echo "system reset - reset the system using the selected firmware"
        echo "system sensors - print system sensors"
        echo "system fru - fru related commands"
        echo "system forensics - configure watchdog forensics collection settings"
        echo "system watchdog - system watchdog commands"
        # diag level commands
        if [ "$priv_mode" == "diag" ];then 
        echo "system printenv - print system environment variables"
        echo "system unsetenv - unset system environment variables"
        echo "system setenv - set system environment variables";fi 
        echo ;;
    *"version"* )
        echo "version - print Service Processor version" ;;
    *"help"* | "?"  )
        echo "date - print date and time"
        echo "exit - exit from the SP command line interface"
        echo "events - print system events and event information"
        echo "help - print command help"
        echo "priv - show and set user mode"
        echo "sp - commands to control the SP"
        echo "system - commands to control the system"
        echo "version - print Service Processor version"
        echo ;;
    * ) usage ;;
  esac
}

function enforce_priv_mode () {
  case $cmd in
    *"system printenv"* )  if [ "$priv_mode" != "diag" ]; then cmd="unauthorized";fi ;;
    *"system setenv"* )  if [ "$priv_mode" != "diag" ]; then cmd="unathorized";fi ;;
    *"system unsetenv"* ) if [ "$priv_mode" != "diag" ]; then cmd="unauthorized";fi ;;
  esac 
}

function run_command () {
  # process command
  case $cmd in
    ""     ) ;;
    "date" ) date ;;
    "date "* ) usage ;;
    "events all" ) journalctl ;;
    "events all "* ) usage ;;
    "events info" ) events_info ;;
    "events info "* ) usage;;
    "events newest"* ) events_newest ;;
    "events oldest"* ) events_oldest ;;
    "events search"* ) events_search ;;
    "events" | "events "* ) help ;;
    "exit" | "exit "* ) exit ;;
    "help" | "help "* | "?"  ) help ;;
    "priv set" | "priv set admin" | "priv set admin "* )
        priv_mode="admin"
        echo "Administrative commands"
        echo ;;
    "priv set -q admin" | "priv set -q admin "* )
        priv_mode="admin"
        ;;
    "priv set advanced" | "priv set advanced "* )
        priv_mode="advanced"
        echo "Warning: These advanced commands are potentially dangerous; use them only when directed to do so by support personnel."
        echo ;;
    "priv set -q advanced" | "priv set -q advanced "* ) priv_mode="advanced" ;;
    "priv set diag" | "priv set diag "* )
        priv_mode="diag"
        echo "Warning: These diagnostic commands are for use by support personnel only."
        echo ;;
    "priv set -q diag" | "priv set -q diag "* ) priv_mode="diag" ;;
    "priv show" | "priv" | "priv show "* ) 
        echo "$priv_mode"
        echo ;;
    "priv set"* ) help ;;
    "sp reboot" ) sp_reboot ;;
    "sp status" ) sp_status ;;
    "sp uptime" ) uptime ;;
    "sp" | "sp "* ) help ;;
    "system acp show" ) echo "ACP is not available" ;;
    "system acp sensors show" ) echo "ACP is not available" ;;
    "system battery show" ) upower -i `upower -e | grep 'BAT'` ;;
    "system console" ) system_console ;;
    "system core" ) system_core ;;
    "system fru list" ) system_fru_list ;;
    "system fru list "* ) usage ;;
    "system fru show"* ) system_fru_show ;;
    "system log" | "system log "* ) system_log ;; # | more -d -n 10 
    "system power cycle" ) system_power_cycle ;;
    "system power halt" ) virsh --connect qemu:///system shutdown "$domain";;
    "system power off" ) system_power_off ;;
    "system power on" ) system_power_on ;;
    "system power status" ) system_power_status ;;
    "system printenv" | "system printenv "* ) printenv "$(echo $cmd | cut -d' ' -f3-)" ;;
    "system getenv" | "system getenv "* ) getenv "$(echo $cmd | cut -d' ' -f3-)" ;;
    "system setenv "* ) setenv "$(echo $cmd | cut -d' ' -f3)" "$(echo $cmd | cut -d' ' -f4)"; echo $cmd | cut -d' ' -f4 ;;
    "system setenv" ) usage ;;
    "system unsetenv "* ) unsetenv "$(echo $cmd | cut -d' ' -f3)" ;;
    "system unsetenv" ) usage ;;
    "system reset" ) system_reset ;;
    "system reset backup" ) system_reset_backup ;;
    "system reset current" ) system_reset_current ;;
    "system reset primary" ) system_reset_primary ;;
    "system sensors" ) sensors ;;
    "system forensics show" ) echo "Forensics enabled: false"; echo;;
    "system watchdog status" ) virsh --connect qemu:///system dumpxml "$domain" | grep watchdog ;;
    "system"* ) help ;;
    "version" ) echo "SP CLI for ONTAP Select version $spcli_version" ;;
    * ) echo "command not found. Type '?' for a list of available commands."
  esac
}

# main loop
function main () {
  init

  # if a command was passed as an argument, run it then exit.
  if [ "$*" != "" ]; then 
    cmd="$*"
    run_command
    exit
  fi

  # start an interactive shell
  while true; do

    # set prompt
    case $priv_mode in
      "admin" ) prompt="SP $domain>" ;;
      "advanced" ) prompt="SP $domain*>" ;;
      "diag" ) prompt="SP $domain*>" ;;
    esac

    # read command with custom history
    history -c
    history -r $spcli_history
    read -ep "$prompt " cmd
    if [ "$cmd" != "" ] && [ "$cmd" != "$(tail $spcli_history -n 1)" ];then echo "$cmd" >> $spcli_history;fi
    
    enforce_priv_mode
    run_command

  done

}

main $*
